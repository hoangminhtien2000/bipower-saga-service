apiVersion: v1
kind: Service
metadata:
  name: saga-service
  namespace: default
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: /actuator/prometheus
    prometheus.io/port: '8761'
spec:
  selector:
    app: saga-service
  ports:
  - name: http
    protocol: TCP
    port: 8100
    targetPort: http
  type: LoadBalancer
  externalIPs:
  - 10.60.155.88
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: saga-service
  namespace: default
  labels:
    app: saga-service
spec:
  revisionHistoryLimit: 1
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: saga-service
  template:
    metadata:
      name: saga-service
      labels:
        app: saga-service
    spec:
      imagePullSecrets:
      - name: bccs-docker-registry
      containers:
      - name: saga-service
        image: 10.60.105.39:8297/saga-service:1.0
        imagePullPolicy: Always
        env:
        - name: _JAVA_OPTIONS
          value: "-Xms700m -Xmx1500m"
        - name: SPRING_APPLICATION_NAME
          value: "saga-service"
        - name: SERVER_PORT
          value: "8761"
        - name: SPRING_PROFILES_ACTIVE
          value: "dev"
        - name: FORCE_REPULL
          value: "datetime_holder"
        ports:
        - name: http
          containerPort: 8761
#        readinessProbe:
#          httpGet:
#            port: http
#            path: /actuator/health
#          initialDelaySeconds: 20
#          timeoutSeconds: 1
#          periodSeconds: 5
#          failureThreshold: 50
#        livenessProbe:
#          httpGet:
#            port: http
#            path: /actuator/health
#          initialDelaySeconds: 20
#          timeoutSeconds: 1
#          periodSeconds: 5
#          failureThreshold: 50
        resources:
          limits:
            memory: "1500Mi"
          requests:
            memory: "700Mi"
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "5"]
